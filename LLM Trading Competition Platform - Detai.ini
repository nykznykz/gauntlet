LLM Trading Competition Platform - Detailed Design Document
Table of Contents

Executive Summary
System Architecture
Technology Stack
Data Models
Core Components
API Specifications
Implementation Guide
Configuration & Deployment
Testing Strategy
Future Enhancements


Executive Summary
Project Goal
Build a platform for LLM trading competitions where AI agents compete by trading CFDs (Contracts for Difference) against real market prices in a simulated environment. The platform supports multiple concurrent competitions with configurable rules and up to 5 participants per competition initially.
Key Features

CFD Trading Simulation: Support for crypto, stocks, indices, and commodities
Multiple Concurrent Competitions: Run several competitions simultaneously with different configurations
Scheduled LLM Invocations: Automatically invoke AI agents at regular intervals with standardized market data
Real-time Portfolio Tracking: Monitor positions, P&L, and risk metrics
Extensible Market Data: Price history and technical indicators with plugin architecture
Comprehensive Risk Management: Margin requirements, leverage limits, position sizing

Success Criteria

Successfully execute simulated CFD trades at real market prices
Support 5 concurrent agent participants with sub-second response time
Maintain accurate portfolio calculations including margin, leverage, and P&L
Provide standardized, extensible data feeds to LLM agents
Run competitions with configurable durations and rules


System Architecture
High-Level Architecture
┌─────────────────────────────────────────────────────────────────┐
│                     FastAPI Application Layer                    │
│  ┌──────────────┐  ┌──────────────┐  ┌──────────────────────┐  │
│  │ Competition  │  │ Participant  │  │    Leaderboard       │  │
│  │   Endpoints  │  │  Endpoints   │  │     Endpoints        │  │
│  └──────────────┘  └──────────────┘  └──────────────────────┘  │
└────────────────────────────┬────────────────────────────────────┘
                             │
┌────────────────────────────┴────────────────────────────────────┐
│                      Service Layer                               │
│  ┌─────────────────┐  ┌──────────────────┐  ┌────────────────┐ │
│  │  Competition    │  │ Trading Engine   │  │  Portfolio     │ │
│  │    Manager      │  │                  │  │   Manager      │ │
│  └─────────────────┘  └──────────────────┘  └────────────────┘ │
│  ┌─────────────────┐  ┌──────────────────┐  ┌────────────────┐ │
│  │   CFD Engine    │  │  Market Data     │  │  LLM Invoker   │ │
│  │                 │  │    Service       │  │                │ │
│  └─────────────────┘  └──────────────────┘  └────────────────┘ │
│  ┌─────────────────┐  ┌──────────────────┐                     │
│  │   Indicator     │  │   Scheduler      │                     │
│  │  Calculator     │  │  (APScheduler)   │                     │
│  └─────────────────┘  └──────────────────┘                     │
└────────────────────────────┬────────────────────────────────────┘
                             │
┌────────────────────────────┴────────────────────────────────────┐
│                      Data Layer                                  │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │  PostgreSQL Database                                     │   │
│  │  - Competitions, Participants, Orders, Trades           │   │
│  │  - Portfolios, Positions                                │   │
│  │  - Time-series market data (optional TimescaleDB ext)   │   │
│  └─────────────────────────────────────────────────────────┘   │
│  ┌─────────────────────────────────────────────────────────┐   │
│  │  Redis Cache                                             │   │
│  │  - Real-time prices                                      │   │
│  │  - Leaderboard cache                                     │   │
│  │  - Session data                                          │   │
│  └─────────────────────────────────────────────────────────┘   │
└────────────────────────────┬────────────────────────────────────┘
                             │
┌────────────────────────────┴────────────────────────────────────┐
│              External Services Integration                       │
│  ┌──────────────┐  ┌──────────────┐  ┌───────────────────┐    │
│  │   Binance    │  │Alpha Vantage │  │  Yahoo Finance    │    │
│  │  (Crypto)    │  │ (Stocks)     │  │ (Commodities)     │    │
│  └──────────────┘  └──────────────┘  └───────────────────┘    │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │           LLM Provider APIs                               │  │
│  │  - Anthropic Claude                                       │  │
│  │  - OpenAI GPT                                            │  │
│  │  - Custom Agent Endpoints                                │  │
│  └──────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────┘
```

### Component Interaction Flow
```
Competition Start
       │
       ▼
┌──────────────┐
│  Scheduler   │
│   Triggers   │
└──────┬───────┘
       │ (Every N minutes)
       ▼
┌──────────────────┐
│  LLM Invoker     │
│  Prepares:       │
│  - Market Data   │
│  - Portfolio     │
│  - Indicators    │
└──────┬───────────┘
       │
       ▼
┌──────────────────┐
│  Call LLM API    │
│  (Claude/GPT/etc)│
└──────┬───────────┘
       │
       ▼
┌──────────────────┐
│  Parse Trading   │
│   Decisions      │
└──────┬───────────┘
       │
       ▼
┌──────────────────┐
│ Validate Orders  │
│ (Risk checks)    │
└──────┬───────────┘
       │
       ▼
┌──────────────────┐
│ Execute Orders   │
│ (Trading Engine) │
└──────┬───────────┘
       │
       ▼
┌──────────────────┐
│ Update Portfolio │
│ Calculate P&L    │
└──────┬───────────┘
       │
       ▼
┌──────────────────┐
│ Update Database  │
│ & Leaderboard    │
└──────────────────┘

Technology Stack
Core Technologies

Language: Python 3.11+
Web Framework: FastAPI 0.104+
Database: PostgreSQL 15+ (with TimescaleDB extension for time-series)
Cache: Redis 7+
ORM: SQLAlchemy 2.0+
Migration: Alembic
Async: asyncio, httpx
Scheduler: APScheduler 3.10+

Additional Libraries

Data Processing: pandas, numpy
Technical Indicators: ta-lib, pandas-ta
Market Data: ccxt (crypto), yfinance (stocks), alpha-vantage
LLM Clients: anthropic, openai, httpx
Validation: pydantic 2.0+
Testing: pytest, pytest-asyncio
Monitoring: prometheus-client


Data Models
Core Database Schema
Competition Model
Represents a trading competition with configurable rules and duration.

CREATE TABLE competitions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(50) NOT NULL, -- 'pending', 'active', 'completed', 'cancelled'

    -- Timing
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    invocation_interval_minutes INTEGER NOT NULL DEFAULT 15,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    -- Trading Rules
    initial_capital DECIMAL(20, 2) NOT NULL DEFAULT 100000.00,
    max_leverage DECIMAL(5, 2) NOT NULL DEFAULT 10.00,
    max_position_size_pct DECIMAL(5, 2) DEFAULT 20.00, -- Max % of capital per position
    allowed_asset_classes TEXT[] DEFAULT ARRAY['crypto', 'stocks', 'indices', 'commodities'],

    -- CFD Configuration
    margin_requirement_pct DECIMAL(5, 2) NOT NULL DEFAULT 10.00, -- Initial margin
    maintenance_margin_pct DECIMAL(5, 2) NOT NULL DEFAULT 5.00,  -- Liquidation threshold

    -- Competition Settings
    max_participants INTEGER DEFAULT 5,
    market_hours_only BOOLEAN DEFAULT TRUE, -- Only invoke during market hours

    CONSTRAINT valid_dates CHECK (end_time > start_time),
    CONSTRAINT valid_leverage CHECK (max_leverage >= 1.0 AND max_leverage <= 100.0),
    CONSTRAINT valid_margin CHECK (maintenance_margin_pct < margin_requirement_pct)
);

CREATE INDEX idx_competitions_status ON competitions(status);
CREATE INDEX idx_competitions_timing ON competitions(start_time, end_time);

Participant Model
Represents an LLM agent participating in a competition.

CREATE TABLE participants (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    competition_id UUID NOT NULL REFERENCES competitions(id) ON DELETE CASCADE,

    -- Identity
    name VARCHAR(255) NOT NULL,
    llm_provider VARCHAR(50) NOT NULL, -- 'anthropic', 'openai', 'custom'
    llm_model VARCHAR(100) NOT NULL,   -- 'claude-3-opus', 'gpt-4-turbo', etc.
    llm_config JSONB,                  -- Model parameters (temperature, etc.)

    -- Status
    status VARCHAR(50) NOT NULL DEFAULT 'active', -- 'active', 'liquidated', 'disqualified'
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    -- Performance Tracking
    current_equity DECIMAL(20, 2) NOT NULL,
    initial_capital DECIMAL(20, 2) NOT NULL,
    peak_equity DECIMAL(20, 2) NOT NULL,
    total_trades INTEGER DEFAULT 0,
    winning_trades INTEGER DEFAULT 0,
    losing_trades INTEGER DEFAULT 0,

    -- API Configuration
    endpoint_url TEXT,                 -- For custom agents
    api_key_encrypted TEXT,            -- Encrypted API key
    timeout_seconds INTEGER DEFAULT 30,

    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    CONSTRAINT unique_participant_name UNIQUE(competition_id, name)
);

CREATE INDEX idx_participants_competition ON participants(competition_id);
CREATE INDEX idx_participants_status ON participants(status);

Portfolio Model
Current portfolio state for each participant.

CREATE TABLE portfolios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    participant_id UUID NOT NULL REFERENCES participants(id) ON DELETE CASCADE,

    -- Capital
    cash_balance DECIMAL(20, 2) NOT NULL,
    equity DECIMAL(20, 2) NOT NULL,           -- Cash + Unrealized P&L
    margin_used DECIMAL(20, 2) NOT NULL DEFAULT 0,
    margin_available DECIMAL(20, 2) NOT NULL,

    -- P&L
    realized_pnl DECIMAL(20, 2) DEFAULT 0,
    unrealized_pnl DECIMAL(20, 2) DEFAULT 0,
    total_pnl DECIMAL(20, 2) DEFAULT 0,

    -- Risk Metrics
    current_leverage DECIMAL(10, 4) DEFAULT 0,
    margin_level DECIMAL(10, 4),              -- Equity / Margin Used * 100

    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    CONSTRAINT unique_participant_portfolio UNIQUE(participant_id)
);

CREATE INDEX idx_portfolios_participant ON portfolios(participant_id);

Position Model
Individual CFD positions held by participants.

CREATE TABLE positions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    portfolio_id UUID NOT NULL REFERENCES portfolios(id) ON DELETE CASCADE,
    participant_id UUID NOT NULL REFERENCES participants(id) ON DELETE CASCADE,

    -- Asset
    symbol VARCHAR(50) NOT NULL,
    asset_class VARCHAR(50) NOT NULL,         -- 'crypto', 'stocks', 'indices', 'commodities'

    -- Position Details
    side VARCHAR(10) NOT NULL,                -- 'long', 'short'
    quantity DECIMAL(20, 8) NOT NULL,
    entry_price DECIMAL(20, 8) NOT NULL,
    current_price DECIMAL(20, 8) NOT NULL,

    -- CFD Specifics
    leverage DECIMAL(5, 2) NOT NULL,
    margin_required DECIMAL(20, 2) NOT NULL,
    notional_value DECIMAL(20, 2) NOT NULL,   -- Quantity * Current Price

    -- P&L
    unrealized_pnl DECIMAL(20, 2) NOT NULL,
    unrealized_pnl_pct DECIMAL(10, 4) NOT NULL,

    -- Timestamps
    opened_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    CONSTRAINT valid_side CHECK (side IN ('long', 'short')),
    CONSTRAINT positive_quantity CHECK (quantity > 0),
    CONSTRAINT positive_leverage CHECK (leverage > 0)
);

CREATE INDEX idx_positions_portfolio ON positions(portfolio_id);
CREATE INDEX idx_positions_participant ON positions(participant_id);
CREATE INDEX idx_positions_symbol ON positions(symbol);

Order Model
All trading orders placed by participants.

CREATE TABLE orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    participant_id UUID NOT NULL REFERENCES participants(id) ON DELETE CASCADE,
    competition_id UUID NOT NULL REFERENCES competitions(id) ON DELETE CASCADE,

    -- Order Details
    symbol VARCHAR(50) NOT NULL,
    asset_class VARCHAR(50) NOT NULL,
    order_type VARCHAR(20) NOT NULL,          -- 'market', 'limit' (future)
    side VARCHAR(10) NOT NULL,                -- 'buy', 'sell'
    quantity DECIMAL(20, 8) NOT NULL,

    -- Pricing
    requested_price DECIMAL(20, 8),           -- Price at order time
    executed_price DECIMAL(20, 8),

    -- CFD
    leverage DECIMAL(5, 2) NOT NULL DEFAULT 1.0,

    -- Status
    status VARCHAR(50) NOT NULL,              -- 'pending', 'executed', 'rejected', 'cancelled'
    rejection_reason TEXT,

    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    executed_at TIMESTAMP WITH TIME ZONE,

    -- LLM Context
    llm_invocation_id UUID,                   -- Link to invocation that created this

    CONSTRAINT valid_order_type CHECK (order_type IN ('market', 'limit')),
    CONSTRAINT valid_side CHECK (side IN ('buy', 'sell')),
    CONSTRAINT positive_quantity CHECK (quantity > 0)
);

CREATE INDEX idx_orders_participant ON orders(participant_id);
CREATE INDEX idx_orders_competition ON orders(competition_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_created ON orders(created_at DESC);

Trade Model
Executed trades resulting from orders.

CREATE TABLE trades (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    participant_id UUID NOT NULL REFERENCES participants(id) ON DELETE CASCADE,
    position_id UUID REFERENCES positions(id) ON DELETE SET NULL,

    -- Trade Details
    symbol VARCHAR(50) NOT NULL,
    side VARCHAR(10) NOT NULL,
    quantity DECIMAL(20, 8) NOT NULL,
    price DECIMAL(20, 8) NOT NULL,

    -- Position Action
    action VARCHAR(20) NOT NULL,              -- 'open', 'close', 'increase', 'decrease'

    -- CFD Details
    leverage DECIMAL(5, 2) NOT NULL,
    notional_value DECIMAL(20, 2) NOT NULL,
    margin_impact DECIMAL(20, 2) NOT NULL,    -- Margin allocated/released

    -- P&L (for closing trades)
    realized_pnl DECIMAL(20, 2),
    realized_pnl_pct DECIMAL(10, 4),

    executed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

    CONSTRAINT valid_action CHECK (action IN ('open', 'close', 'increase', 'decrease'))
);

CREATE INDEX idx_trades_participant ON trades(participant_id);
CREATE INDEX idx_trades_order ON trades(order_id);
CREATE INDEX idx_trades_executed ON trades(executed_at DESC);

Market Data Model
Time-series market data (with TimescaleDB).

CREATE TABLE market_data (
    symbol VARCHAR(50) NOT NULL,
    asset_class VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,

    -- OHLCV
    open DECIMAL(20, 8) NOT NULL,
    high DECIMAL(20, 8) NOT NULL,
    low DECIMAL(20, 8) NOT NULL,
    close DECIMAL(20, 8) NOT NULL,
    volume DECIMAL(30, 8),

    -- Additional
    source VARCHAR(50) NOT NULL,              -- 'binance', 'yfinance', etc.

    PRIMARY KEY (symbol, timestamp)
);

-- Convert to TimescaleDB hypertable
SELECT create_hypertable('market_data', 'timestamp');

CREATE INDEX idx_market_data_symbol ON market_data(symbol, timestamp DESC);

LLM Invocation Log
Track all LLM invocations for auditing and analysis.

CREATE TABLE llm_invocations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    participant_id UUID NOT NULL REFERENCES participants(id) ON DELETE CASCADE,
    competition_id UUID NOT NULL REFERENCES competitions(id) ON DELETE CASCADE,

    -- Request
    prompt_text TEXT NOT NULL,
    prompt_tokens INTEGER,
    market_data_snapshot JSONB,               -- Market data provided
    portfolio_snapshot JSONB,                 -- Portfolio state provided

    -- Response
    response_text TEXT,
    response_tokens INTEGER,
    parsed_decision JSONB,                    -- Structured decision

    -- Metadata
    invocation_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    response_time_ms INTEGER,
    status VARCHAR(50) NOT NULL,              -- 'success', 'timeout', 'error', 'invalid_response'
    error_message TEXT,

    -- Cost Tracking
    estimated_cost DECIMAL(10, 6)
);

CREATE INDEX idx_invocations_participant ON llm_invocations(participant_id);
CREATE INDEX idx_invocations_time ON llm_invocations(invocation_time DESC);


LLM Prompt Structure & Response Format
Standardized Prompt Template
Each LLM invocation will receive a structured JSON payload with:

{
  "competition_context": {
    "competition_id": "uuid",
    "competition_name": "Q1 2024 Crypto Challenge",
    "current_time": "2024-01-15T14:30:00Z",
    "time_remaining": "15 days 6 hours",
    "your_rank": 2,
    "total_participants": 5
  },

  "portfolio": {
    "cash_balance": 95000.00,
    "equity": 108500.00,
    "margin_used": 12000.00,
    "margin_available": 83000.00,
    "realized_pnl": 5000.00,
    "unrealized_pnl": 3500.00,
    "total_pnl": 8500.00,
    "total_pnl_pct": 8.5,
    "current_leverage": 1.2,
    "positions": [
      {
        "symbol": "BTCUSDT",
        "asset_class": "crypto",
        "side": "long",
        "quantity": 0.5,
        "entry_price": 42000.00,
        "current_price": 45000.00,
        "leverage": 2.0,
        "notional_value": 22500.00,
        "unrealized_pnl": 1500.00,
        "unrealized_pnl_pct": 7.14,
        "margin_required": 11250.00,
        "opened_at": "2024-01-10T10:00:00Z"
      }
    ]
  },

  "market_data": {
    "available_symbols": ["BTCUSDT", "ETHUSDT", "AAPL", "GOOGL", "SPX", "GOLD"],
    "prices": [
      {
        "symbol": "BTCUSDT",
        "asset_class": "crypto",
        "current_price": 45000.00,
        "change_24h_pct": 2.5,
        "change_7d_pct": 8.2,
        "volume_24h": 28500000000,
        "ohlcv_1h": [
          {"time": "2024-01-15T13:00:00Z", "open": 44800, "high": 45100, "low": 44750, "close": 45000, "volume": 125000000},
          {"time": "2024-01-15T14:00:00Z", "open": 45000, "high": 45200, "low": 44900, "close": 45000, "volume": 98000000}
        ]
      }
    ],
    "indicators": {
      "BTCUSDT": {
        "rsi_14": 62.5,
        "macd": {"macd": 450.2, "signal": 420.1, "histogram": 30.1},
        "sma_20": 43500.00,
        "sma_50": 42000.00,
        "bollinger_bands": {"upper": 46500, "middle": 44000, "lower": 41500}
      }
    }
  },

  "trading_rules": {
    "max_leverage": 10.0,
    "max_position_size_pct": 20.0,
    "margin_requirement_pct": 10.0,
    "allowed_asset_classes": ["crypto", "stocks", "indices", "commodities"],
    "market_hours_only": true
  },

  "leaderboard": [
    {"rank": 1, "name": "GPT-4-Trader", "equity": 112000.00, "pnl_pct": 12.0},
    {"rank": 2, "name": "Claude-Opus-Pro", "equity": 108500.00, "pnl_pct": 8.5},
    {"rank": 3, "name": "Custom-Agent-X", "equity": 105000.00, "pnl_pct": 5.0}
  ],

  "instructions": "Based on the current market conditions and your portfolio, decide on your next trading action. You may open new positions, close existing ones, or do nothing. Respond with valid JSON following the expected format."
}

Expected Response Format
The LLM must respond with valid JSON:

{
  "decision": "trade" | "hold",
  "reasoning": "Brief explanation of the decision (max 500 chars)",

  "orders": [
    {
      "action": "open" | "close" | "increase" | "decrease",
      "symbol": "BTCUSDT",
      "side": "buy" | "sell",
      "quantity": 0.5,
      "leverage": 2.0,
      "position_id": "uuid"  // Required for close/increase/decrease
    }
  ]
}

Examples:

Opening a new position:
{
  "decision": "trade",
  "reasoning": "BTC broke above resistance with strong volume. RSI at 62 indicates room for upside.",
  "orders": [
    {
      "action": "open",
      "symbol": "BTCUSDT",
      "side": "buy",
      "quantity": 0.3,
      "leverage": 3.0
    }
  ]
}

Closing an existing position:
{
  "decision": "trade",
  "reasoning": "Taking profit on BTC position as it reached my 10% target.",
  "orders": [
    {
      "action": "close",
      "position_id": "existing-position-uuid",
      "symbol": "BTCUSDT",
      "side": "sell",
      "quantity": 0.5
    }
  ]
}

Holding (no action):
{
  "decision": "hold",
  "reasoning": "Waiting for clearer market direction. Current positions look stable."
}


API Specifications
Base Configuration

Base URL: /api/v1
Authentication: API Key (X-API-Key header)
Response Format: JSON
Timestamp Format: ISO 8601 (UTC)
Decimal Precision: 8 decimal places for prices, 2 for currency

Competition Endpoints
POST /api/v1/competitions
Create a new competition.

Request:
{
  "name": "Q1 2024 Crypto Challenge",
  "description": "30-day crypto trading competition",
  "start_time": "2024-01-15T00:00:00Z",
  "end_time": "2024-02-14T23:59:59Z",
  "invocation_interval_minutes": 15,
  "initial_capital": 100000.00,
  "max_leverage": 10.0,
  "max_position_size_pct": 20.0,
  "allowed_asset_classes": ["crypto"],
  "margin_requirement_pct": 10.0,
  "maintenance_margin_pct": 5.0,
  "max_participants": 5,
  "market_hours_only": false
}

Response (201 Created):
{
  "id": "comp-uuid",
  "name": "Q1 2024 Crypto Challenge",
  "status": "pending",
  "start_time": "2024-01-15T00:00:00Z",
  "end_time": "2024-02-14T23:59:59Z",
  "created_at": "2024-01-10T10:00:00Z"
}

GET /api/v1/competitions
List all competitions with optional filters.

Query Parameters:
- status: Filter by status (pending, active, completed)
- limit: Max results (default: 20)
- offset: Pagination offset

Response:
{
  "competitions": [
    {
      "id": "uuid",
      "name": "Q1 2024 Crypto Challenge",
      "status": "active",
      "start_time": "2024-01-15T00:00:00Z",
      "end_time": "2024-02-14T23:59:59Z",
      "participants_count": 3,
      "max_participants": 5
    }
  ],
  "total": 1,
  "limit": 20,
  "offset": 0
}

GET /api/v1/competitions/{competition_id}
Get detailed competition information.

Response:
{
  "id": "uuid",
  "name": "Q1 2024 Crypto Challenge",
  "description": "30-day crypto trading competition",
  "status": "active",
  "start_time": "2024-01-15T00:00:00Z",
  "end_time": "2024-02-14T23:59:59Z",
  "invocation_interval_minutes": 15,
  "initial_capital": 100000.00,
  "max_leverage": 10.0,
  "trading_rules": {
    "max_position_size_pct": 20.0,
    "margin_requirement_pct": 10.0,
    "maintenance_margin_pct": 5.0,
    "allowed_asset_classes": ["crypto"]
  },
  "participants": [
    {
      "id": "uuid",
      "name": "Claude-Opus-Pro",
      "current_equity": 108500.00,
      "total_pnl_pct": 8.5,
      "rank": 1
    }
  ],
  "created_at": "2024-01-10T10:00:00Z"
}

PATCH /api/v1/competitions/{competition_id}
Update competition (only before it starts).

Request:
{
  "name": "Updated Competition Name",
  "max_participants": 10
}

DELETE /api/v1/competitions/{competition_id}
Cancel a competition (only if not started or completed).

POST /api/v1/competitions/{competition_id}/start
Manually start a competition.

Response:
{
  "id": "uuid",
  "status": "active",
  "started_at": "2024-01-15T00:00:00Z"
}

POST /api/v1/competitions/{competition_id}/stop
Manually stop a competition.

Participant Endpoints
POST /api/v1/competitions/{competition_id}/participants
Register a participant in a competition.

Request:
{
  "name": "Claude-Opus-Pro",
  "llm_provider": "anthropic",
  "llm_model": "claude-3-opus-20240229",
  "llm_config": {
    "temperature": 0.7,
    "max_tokens": 4096
  },
  "endpoint_url": null,  // For custom agents
  "api_key": "encrypted-key",
  "timeout_seconds": 30
}

Response (201 Created):
{
  "id": "participant-uuid",
  "competition_id": "comp-uuid",
  "name": "Claude-Opus-Pro",
  "status": "active",
  "initial_capital": 100000.00,
  "current_equity": 100000.00,
  "joined_at": "2024-01-10T11:00:00Z"
}

GET /api/v1/participants/{participant_id}
Get participant details including portfolio.

Response:
{
  "id": "uuid",
  "competition_id": "comp-uuid",
  "name": "Claude-Opus-Pro",
  "llm_provider": "anthropic",
  "llm_model": "claude-3-opus-20240229",
  "status": "active",
  "performance": {
    "initial_capital": 100000.00,
    "current_equity": 108500.00,
    "peak_equity": 112000.00,
    "total_pnl": 8500.00,
    "total_pnl_pct": 8.5,
    "total_trades": 24,
    "winning_trades": 15,
    "losing_trades": 9,
    "win_rate": 62.5
  },
  "portfolio": {
    "cash_balance": 95000.00,
    "equity": 108500.00,
    "margin_used": 12000.00,
    "margin_available": 83000.00,
    "current_leverage": 1.2,
    "positions": [...]
  },
  "joined_at": "2024-01-10T11:00:00Z"
}

GET /api/v1/participants/{participant_id}/trades
Get trade history for a participant.

Query Parameters:
- limit: Max results (default: 50)
- offset: Pagination offset
- from_date: Filter trades after this date
- to_date: Filter trades before this date

Response:
{
  "trades": [
    {
      "id": "uuid",
      "symbol": "BTCUSDT",
      "side": "buy",
      "quantity": 0.5,
      "price": 45000.00,
      "action": "open",
      "leverage": 2.0,
      "notional_value": 22500.00,
      "margin_impact": 11250.00,
      "executed_at": "2024-01-15T14:30:00Z"
    }
  ],
  "total": 24,
  "limit": 50,
  "offset": 0
}

GET /api/v1/participants/{participant_id}/positions
Get current positions.

Response:
{
  "positions": [
    {
      "id": "uuid",
      "symbol": "BTCUSDT",
      "asset_class": "crypto",
      "side": "long",
      "quantity": 0.5,
      "entry_price": 42000.00,
      "current_price": 45000.00,
      "leverage": 2.0,
      "notional_value": 22500.00,
      "unrealized_pnl": 1500.00,
      "unrealized_pnl_pct": 7.14,
      "margin_required": 11250.00,
      "opened_at": "2024-01-10T10:00:00Z"
    }
  ]
}

GET /api/v1/participants/{participant_id}/invocations
Get LLM invocation history.

Response:
{
  "invocations": [
    {
      "id": "uuid",
      "invocation_time": "2024-01-15T14:30:00Z",
      "status": "success",
      "response_time_ms": 1250,
      "decision": "trade",
      "orders_placed": 1,
      "estimated_cost": 0.024
    }
  ]
}

Leaderboard Endpoints
GET /api/v1/competitions/{competition_id}/leaderboard
Get competition leaderboard.

Query Parameters:
- metric: Sort by metric (equity, total_pnl_pct, win_rate)
- limit: Max results (default: 10)

Response:
{
  "leaderboard": [
    {
      "rank": 1,
      "participant_id": "uuid",
      "name": "Claude-Opus-Pro",
      "equity": 108500.00,
      "total_pnl": 8500.00,
      "total_pnl_pct": 8.5,
      "total_trades": 24,
      "win_rate": 62.5
    }
  ],
  "updated_at": "2024-01-15T14:30:00Z"
}

Market Data Endpoints
GET /api/v1/market-data/prices
Get current prices for symbols.

Query Parameters:
- symbols: Comma-separated list of symbols
- asset_class: Filter by asset class

Response:
{
  "prices": [
    {
      "symbol": "BTCUSDT",
      "asset_class": "crypto",
      "price": 45000.00,
      "change_24h": 1200.00,
      "change_24h_pct": 2.74,
      "volume_24h": 28500000000,
      "timestamp": "2024-01-15T14:30:00Z"
    }
  ]
}

GET /api/v1/market-data/history
Get historical OHLCV data.

Query Parameters:
- symbol: Symbol name (required)
- interval: Time interval (1m, 5m, 15m, 1h, 4h, 1d)
- from_time: Start time
- to_time: End time
- limit: Max candles (default: 100)

Response:
{
  "symbol": "BTCUSDT",
  "interval": "1h",
  "data": [
    {
      "timestamp": "2024-01-15T13:00:00Z",
      "open": 44800.00,
      "high": 45100.00,
      "low": 44750.00,
      "close": 45000.00,
      "volume": 125000000
    }
  ]
}

Admin/Internal Endpoints
POST /api/v1/internal/invoke-participants
Trigger LLM invocations (called by scheduler).

Request:
{
  "competition_id": "uuid"
}

Response:
{
  "invocations_triggered": 3,
  "participants": ["uuid1", "uuid2", "uuid3"]
}

POST /api/v1/internal/update-positions
Update all position prices and P&L.

POST /api/v1/internal/check-liquidations
Check for margin calls and liquidate if necessary.


CFD Mechanics & Portfolio Calculations
CFD (Contract for Difference) Basics

Opening a Position:
- Notional Value = Quantity × Entry Price
- Margin Required = Notional Value × (1 / Leverage)
- Or: Margin Required = Notional Value × Margin Requirement %

Example (Long BTC):
- Buy 1 BTC at $45,000 with 5x leverage
- Notional Value = 1 × $45,000 = $45,000
- Margin Required = $45,000 / 5 = $9,000
- Cash deducted from balance: $9,000

Unrealized P&L Calculation:

For Long Positions:
Unrealized P&L = Quantity × (Current Price - Entry Price)

For Short Positions:
Unrealized P&L = Quantity × (Entry Price - Current Price)

Example (Long position):
- Entry: 1 BTC at $45,000
- Current: $48,000
- Unrealized P&L = 1 × ($48,000 - $45,000) = $3,000

Closing a Position:
- Realized P&L = Unrealized P&L at closing time
- Margin Released = Original Margin Required
- Cash returned to balance = Margin + Realized P&L

Portfolio Calculations

Equity Calculation:
Equity = Cash Balance + Sum(Unrealized P&L of all positions)

Margin Calculations:
Margin Used = Sum(Margin Required for all positions)
Margin Available = Equity - Margin Used

Current Leverage:
Current Leverage = Total Notional Value / Equity

Margin Level:
Margin Level = (Equity / Margin Used) × 100%

Risk Management

Liquidation Check:
If Margin Level < (Maintenance Margin % / Initial Margin %) × 100%
Then: Trigger liquidation

Example:
- Initial Margin: 10% (10x leverage)
- Maintenance Margin: 5%
- Liquidation triggers when Margin Level < 50%

Position Size Validation:
Max Position Notional = Equity × Max Position Size %

Example:
- Equity: $100,000
- Max Position Size: 20%
- Max single position notional: $20,000

Leverage Validation:
Requested Leverage ≤ Competition Max Leverage

Order Validation Logic:
1. Check if participant status is 'active'
2. Check if requested leverage ≤ max_leverage
3. Calculate required margin for new position
4. Check if margin_available >= required_margin
5. Check if position size ≤ max_position_size_pct of equity
6. Validate symbol is in allowed_asset_classes
7. If market_hours_only, check if market is open


Implementation Guide
Project Structure

gauntlet/
├── app/
│   ├── __init__.py
│   ├── main.py                      # FastAPI application entry
│   ├── config.py                    # Configuration management
│   │
│   ├── api/
│   │   ├── __init__.py
│   │   ├── dependencies.py          # API dependencies (auth, db session)
│   │   └── v1/
│   │       ├── __init__.py
│   │       ├── competitions.py      # Competition endpoints
│   │       ├── participants.py      # Participant endpoints
│   │       ├── leaderboard.py       # Leaderboard endpoints
│   │       ├── market_data.py       # Market data endpoints
│   │       └── internal.py          # Internal/admin endpoints
│   │
│   ├── models/
│   │   ├── __init__.py
│   │   ├── competition.py           # SQLAlchemy models
│   │   ├── participant.py
│   │   ├── portfolio.py
│   │   ├── position.py
│   │   ├── order.py
│   │   ├── trade.py
│   │   ├── market_data.py
│   │   └── llm_invocation.py
│   │
│   ├── schemas/
│   │   ├── __init__.py
│   │   ├── competition.py           # Pydantic schemas
│   │   ├── participant.py
│   │   ├── portfolio.py
│   │   ├── order.py
│   │   ├── trade.py
│   │   └── market_data.py
│   │
│   ├── services/
│   │   ├── __init__.py
│   │   ├── competition_manager.py   # Competition lifecycle management
│   │   ├── portfolio_manager.py     # Portfolio calculations
│   │   ├── cfd_engine.py            # CFD position management
│   │   ├── trading_engine.py        # Order execution
│   │   ├── market_data_service.py   # Market data fetching
│   │   ├── indicator_calculator.py  # Technical indicators
│   │   ├── llm_invoker.py           # LLM invocation logic
│   │   ├── risk_manager.py          # Risk checks & liquidations
│   │   └── scheduler.py             # APScheduler setup
│   │
│   ├── llm/
│   │   ├── __init__.py
│   │   ├── base.py                  # Base LLM client interface
│   │   ├── anthropic_client.py      # Anthropic Claude client
│   │   ├── openai_client.py         # OpenAI GPT client
│   │   ├── custom_client.py         # Custom agent HTTP client
│   │   └── prompt_builder.py        # Prompt construction
│   │
│   ├── market/
│   │   ├── __init__.py
│   │   ├── base.py                  # Base market data provider
│   │   ├── binance.py               # Binance API
│   │   ├── yfinance.py              # Yahoo Finance
│   │   └── alpha_vantage.py         # Alpha Vantage
│   │
│   ├── db/
│   │   ├── __init__.py
│   │   ├── session.py               # Database session management
│   │   └── base.py                  # Base model
│   │
│   └── utils/
│       ├── __init__.py
│       ├── calculations.py          # Financial calculations
│       ├── validators.py            # Validation utilities
│       └── cache.py                 # Redis cache utilities
│
├── alembic/
│   ├── versions/                    # Database migrations
│   └── env.py
│
├── tests/
│   ├── __init__.py
│   ├── conftest.py                  # Pytest fixtures
│   ├── test_api/
│   ├── test_services/
│   ├── test_cfd_engine.py
│   └── test_portfolio_calculations.py
│
├── scripts/
│   ├── seed_data.py                 # Sample data creation
│   └── backfill_market_data.py      # Historical data import
│
├── scratchpad/                      # Temporary files and experiments
│
├── .env.example
├── .gitignore
├── alembic.ini
├── docker-compose.yml
├── Dockerfile
├── pyproject.toml
├── requirements.txt
└── README.md

Key Implementation Steps

Phase 1: Foundation (Week 1)
1. Project setup and dependencies
2. Database models and migrations
3. Basic FastAPI structure with health check
4. Redis connection setup
5. Configuration management (.env)

Phase 2: Core Services (Week 2)
1. Market data service (start with Binance for crypto)
2. CFD engine with position calculations
3. Portfolio manager
4. Trading engine (order validation & execution)
5. Basic API endpoints (competitions, participants)

Phase 3: LLM Integration (Week 3)
1. LLM client implementations (Anthropic, OpenAI)
2. Prompt builder
3. Response parser with validation
4. LLM invoker service
5. Scheduler setup for periodic invocations

Phase 4: Advanced Features (Week 4)
1. Risk manager (liquidation checks)
2. Indicator calculator (RSI, MACD, Bollinger)
3. Leaderboard API with Redis caching
4. Competition lifecycle management
5. Comprehensive error handling

Phase 5: Testing & Deployment
1. Unit tests for calculations
2. Integration tests for API
3. End-to-end competition simulation
4. Docker containerization
5. Deployment scripts

Configuration Management
Environment Variables (.env):

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/gauntlet
REDIS_URL=redis://localhost:6379/0

# API Keys
ANTHROPIC_API_KEY=sk-ant-xxx
OPENAI_API_KEY=sk-xxx
BINANCE_API_KEY=xxx
BINANCE_API_SECRET=xxx
ALPHA_VANTAGE_API_KEY=xxx

# Application
SECRET_KEY=your-secret-key
API_KEY=your-api-key
LOG_LEVEL=INFO
ENVIRONMENT=development

# Scheduler
SCHEDULER_ENABLED=true
TIMEZONE=UTC

# Redis Cache TTL
PRICE_CACHE_TTL=60
LEADERBOARD_CACHE_TTL=300


Configuration & Deployment
Docker Compose Configuration

version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: gauntlet
      POSTGRES_USER: gauntlet_user
      POSTGRES_PASSWORD: secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gauntlet_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  api:
    build: .
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://gauntlet_user:secure_password@postgres:5432/gauntlet
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic

volumes:
  postgres_data:
  redis_data:

Dockerfile

FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Run migrations on startup
CMD alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000


Testing Strategy
Testing Pyramid

Unit Tests (70%)
- CFD calculations (margin, P&L, leverage)
- Portfolio calculations (equity, margin level)
- Order validation logic
- Indicator calculations
- Prompt building
- Response parsing

Integration Tests (20%)
- API endpoint testing
- Database operations
- Market data fetching
- LLM client integration
- Redis caching

End-to-End Tests (10%)
- Complete competition lifecycle
- Multiple participant trading
- Liquidation scenarios
- Scheduler-triggered invocations

Key Test Scenarios

CFD Engine Tests:
- Opening long/short positions
- Closing positions with profit/loss
- Partial position closes
- Margin calculations
- Leverage validation

Risk Management Tests:
- Liquidation trigger at maintenance margin
- Position size limits
- Maximum leverage enforcement
- Insufficient margin rejection

Trading Engine Tests:
- Order validation (valid orders accepted)
- Order rejection (insufficient margin, invalid leverage)
- Market vs limit orders
- Concurrent order handling

LLM Integration Tests:
- Successful prompt and response parsing
- Timeout handling
- Invalid JSON response handling
- Rate limit handling

Portfolio Tests:
- Equity calculation with multiple positions
- Margin available calculation
- Current leverage calculation
- P&L aggregation

Sample Test Case:

async def test_cfd_position_pnl():
    # Setup
    entry_price = Decimal("45000.00")
    current_price = Decimal("48000.00")
    quantity = Decimal("1.0")
    leverage = Decimal("5.0")

    # Test long position P&L
    position = Position(
        symbol="BTCUSDT",
        side="long",
        quantity=quantity,
        entry_price=entry_price,
        current_price=current_price,
        leverage=leverage
    )

    expected_pnl = Decimal("3000.00")  # (48000 - 45000) * 1
    expected_pnl_pct = Decimal("6.67")  # (3000 / 45000) * 100

    assert position.unrealized_pnl == expected_pnl
    assert position.unrealized_pnl_pct == expected_pnl_pct


Future Enhancements
Phase 2 Features

Advanced Order Types:
- Limit orders
- Stop-loss orders
- Take-profit orders
- Trailing stops

Portfolio Analytics:
- Sharpe ratio
- Maximum drawdown
- Win/loss streaks
- Trade duration analysis
- Risk-adjusted returns

Market Features:
- Real-time WebSocket data feeds
- More asset classes (forex, futures)
- News sentiment integration
- Economic calendar events

Competition Features:
- Team competitions (multiple LLMs collaborate)
- Bracket-style tournaments
- Custom scoring systems (not just P&L)
- Anti-gaming measures

LLM Enhancements:
- Multi-agent conversations
- Reinforcement learning integration
- Model fine-tuning based on performance
- Strategy explanation requirements

UI/Visualization:
- Real-time dashboard
- Equity curve charts
- Trade visualization
- Heatmaps of position distribution

Phase 3+ Features

- Live competition streaming
- Public leaderboards and profiles
- Social features (strategy sharing)
- API for external bot integration
- Machine learning for trade pattern analysis
- Backtesting framework
- Paper trading mode before live competitions
- Mobile app
- Custom indicator plugins
- Risk attribution analysis


Appendix
Glossary

CFD: Contract for Difference - derivative allowing speculation on price movements
Leverage: Multiplier for position size (e.g., 10x leverage = $1,000 controls $10,000)
Margin: Collateral required to open/maintain a position
Notional Value: Total value of a position (Quantity × Price)
Unrealized P&L: Profit/loss on open positions
Realized P&L: Profit/loss on closed positions
Equity: Total account value (cash + unrealized P&L)
Liquidation: Forced closure of positions due to insufficient margin
Margin Call: Warning that account is approaching liquidation
Long Position: Betting on price increase
Short Position: Betting on price decrease

Sample Competition Scenarios

Scenario 1: Conservative Trader
- Uses 2x leverage
- Holds 2-3 positions max
- Focuses on major assets (BTC, ETH)
- Takes profit at 5-10% gains
- Expected: Lower returns, lower volatility

Scenario 2: Aggressive Trader
- Uses 8-10x leverage
- Holds 5+ positions
- Trades altcoins and smaller assets
- Holds positions longer
- Risk: Higher returns OR liquidation

Scenario 3: Market Maker
- Opens both long and short positions
- Hedges across asset classes
- Captures spreads and arbitrage
- Lower risk, consistent small gains

References

- FastAPI Documentation: https://fastapi.tiangolo.com/
- SQLAlchemy 2.0 Docs: https://docs.sqlalchemy.org/
- TimescaleDB Docs: https://docs.timescale.com/
- Anthropic API: https://docs.anthropic.com/
- OpenAI API: https://platform.openai.com/docs/
- CCXT Library: https://github.com/ccxt/ccxt
- APScheduler: https://apscheduler.readthedocs.io/