"""Initial schema

Revision ID: 35b27664f34b
Revises: 
Create Date: 2025-10-31 23:51:55.335747

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '35b27664f34b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('competitions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('start_time', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('end_time', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('invocation_interval_minutes', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('initial_capital', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('max_leverage', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('max_position_size_pct', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('allowed_asset_classes', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('margin_requirement_pct', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('maintenance_margin_pct', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('max_participants', sa.Integer(), nullable=True),
    sa.Column('market_hours_only', sa.Boolean(), nullable=True),
    sa.CheckConstraint('end_time > start_time', name=op.f('ck_competitions_valid_dates')),
    sa.CheckConstraint('maintenance_margin_pct < margin_requirement_pct', name=op.f('ck_competitions_valid_margin')),
    sa.CheckConstraint('max_leverage >= 1.0 AND max_leverage <= 100.0', name=op.f('ck_competitions_valid_leverage')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_competitions'))
    )
    op.create_table('participants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('competition_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('llm_provider', sa.String(length=50), nullable=False),
    sa.Column('llm_model', sa.String(length=100), nullable=False),
    sa.Column('llm_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('joined_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('current_equity', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('initial_capital', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('peak_equity', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('total_trades', sa.Integer(), nullable=True),
    sa.Column('winning_trades', sa.Integer(), nullable=True),
    sa.Column('losing_trades', sa.Integer(), nullable=True),
    sa.Column('endpoint_url', sa.Text(), nullable=True),
    sa.Column('api_key_encrypted', sa.Text(), nullable=True),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['competition_id'], ['competitions.id'], name=op.f('fk_participants_competition_id_competitions'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_participants')),
    sa.UniqueConstraint('competition_id', 'name', name='unique_participant_name')
    )
    op.create_table('llm_invocations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('participant_id', sa.UUID(), nullable=False),
    sa.Column('competition_id', sa.UUID(), nullable=False),
    sa.Column('prompt_text', sa.Text(), nullable=False),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True),
    sa.Column('market_data_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('portfolio_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('response_text', sa.Text(), nullable=True),
    sa.Column('response_tokens', sa.Integer(), nullable=True),
    sa.Column('parsed_decision', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('invocation_time', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('estimated_cost', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.ForeignKeyConstraint(['competition_id'], ['competitions.id'], name=op.f('fk_llm_invocations_competition_id_competitions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name=op.f('fk_llm_invocations_participant_id_participants'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_llm_invocations'))
    )
    op.create_table('portfolios',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('participant_id', sa.UUID(), nullable=False),
    sa.Column('cash_balance', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('equity', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('margin_used', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('margin_available', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('realized_pnl', sa.Numeric(precision=20, scale=2), nullable=True),
    sa.Column('unrealized_pnl', sa.Numeric(precision=20, scale=2), nullable=True),
    sa.Column('total_pnl', sa.Numeric(precision=20, scale=2), nullable=True),
    sa.Column('current_leverage', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('margin_level', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name=op.f('fk_portfolios_participant_id_participants'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_portfolios')),
    sa.UniqueConstraint('participant_id', name='unique_participant_portfolio')
    )
    op.create_table('orders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('participant_id', sa.UUID(), nullable=False),
    sa.Column('competition_id', sa.UUID(), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('asset_class', sa.String(length=50), nullable=False),
    sa.Column('order_type', sa.String(length=20), nullable=False),
    sa.Column('side', sa.String(length=10), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('requested_price', sa.Numeric(precision=20, scale=8), nullable=True),
    sa.Column('executed_price', sa.Numeric(precision=20, scale=8), nullable=True),
    sa.Column('leverage', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('executed_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('llm_invocation_id', sa.UUID(), nullable=True),
    sa.CheckConstraint("order_type IN ('market', 'limit')", name=op.f('ck_orders_valid_order_type')),
    sa.CheckConstraint("side IN ('buy', 'sell')", name=op.f('ck_orders_valid_side')),
    sa.CheckConstraint('quantity > 0', name=op.f('ck_orders_positive_quantity')),
    sa.ForeignKeyConstraint(['competition_id'], ['competitions.id'], name=op.f('fk_orders_competition_id_competitions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['llm_invocation_id'], ['llm_invocations.id'], name=op.f('fk_orders_llm_invocation_id_llm_invocations'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name=op.f('fk_orders_participant_id_participants'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_orders'))
    )
    op.create_table('positions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('portfolio_id', sa.UUID(), nullable=False),
    sa.Column('participant_id', sa.UUID(), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('asset_class', sa.String(length=50), nullable=False),
    sa.Column('side', sa.String(length=10), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('entry_price', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('current_price', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('leverage', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('margin_required', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('notional_value', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('unrealized_pnl', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('unrealized_pnl_pct', sa.Numeric(precision=10, scale=4), nullable=False),
    sa.Column('opened_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint("side IN ('long', 'short')", name=op.f('ck_positions_valid_side')),
    sa.CheckConstraint('leverage > 0', name=op.f('ck_positions_positive_leverage')),
    sa.CheckConstraint('quantity > 0', name=op.f('ck_positions_positive_quantity')),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name=op.f('fk_positions_participant_id_participants'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], name=op.f('fk_positions_portfolio_id_portfolios'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_positions'))
    )
    op.create_table('trades',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('participant_id', sa.UUID(), nullable=False),
    sa.Column('position_id', sa.UUID(), nullable=True),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('side', sa.String(length=10), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('price', sa.Numeric(precision=20, scale=8), nullable=False),
    sa.Column('action', sa.String(length=20), nullable=False),
    sa.Column('leverage', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('notional_value', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('margin_impact', sa.Numeric(precision=20, scale=2), nullable=False),
    sa.Column('realized_pnl', sa.Numeric(precision=20, scale=2), nullable=True),
    sa.Column('realized_pnl_pct', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('executed_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint("action IN ('open', 'close', 'increase', 'decrease')", name=op.f('ck_trades_valid_action')),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name=op.f('fk_trades_order_id_orders'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name=op.f('fk_trades_participant_id_participants'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['position_id'], ['positions.id'], name=op.f('fk_trades_position_id_positions'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_trades'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trades')
    op.drop_table('positions')
    op.drop_table('orders')
    op.drop_table('portfolios')
    op.drop_table('llm_invocations')
    op.drop_table('participants')
    op.drop_table('competitions')
    # ### end Alembic commands ###
